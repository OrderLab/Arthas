#
# Generates C++ sources from the .proto files
#
# grpc_generate_cpp_src (<PROTO_SRCS> <PROTO_HDRS> <GRPC_SRCS> <GRPC_HDRS> <DEST> [<ARGN>...])
#
#  PROTO_SRCS - variable to define with autogenerated source files
#  PROTO_HDRS - variable to define with autogenerated header files
#  GRPC_SRCS - variable to define with autogenerated source files
#  GRPC_HDRS - variable to define with autogenerated header files
#  DEST - directory where the source files will be created
#  ARGN - .proto files
#
function(GRPC_GENERATE_CPP_SRC PROTO_SRCS PROTO_HDRS GRPC_SRCS GRPC_HDRS DEST)
  if(NOT ARGN)
    message(SEND_ERROR "Error: GRPC_GENERATE_CPP() called without any proto files")
    return()
  endif()

  set(${PROTO_SRCS})
  set(${PROTO_HDRS})
  set(${GRPC_SRCS})
  set(${GRPC_HDRS})
  message(STATUS "grpc out: ${DEST}")
  foreach(FIL ${ARGN})
    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
    get_filename_component(FIL_WE ${FIL} NAME_WE)
    get_filename_component(FIL_PA ${FIL} PATH)

    list(APPEND ${PROTO_SRCS} "${DEST}/${FIL_WE}.pb.cc")
    list(APPEND ${PROTO_HDRS} "${DEST}/${FIL_WE}.pb.h")
    list(APPEND ${GRPC_SRCS} "${DEST}/${FIL_WE}.grpc.pb.cc")
    list(APPEND ${GRPC_HDRS} "${DEST}/${FIL_WE}.grpc.pb.h")

    add_custom_command(
      OUTPUT "${DEST}/${FIL_WE}.pb.cc"
             "${DEST}/${FIL_WE}.pb.h"
             "${DEST}/${FIL_WE}.grpc.pb.cc"
             "${DEST}/${FIL_WE}.grpc.pb.h"
      COMMAND protobuf::protoc
      ARGS --grpc_out "${DEST}"
          --cpp_out "${DEST}"
          --plugin=protoc-gen-grpc=${GRPC_CPP_PLUGIN}
          -I "${FIL_PA}"
          "${ABS_FIL}"
      DEPENDS ${ABS_FIL}
      COMMENT "Running gRPC C++ compiler on ${FIL}"
      VERBATIM )
  endforeach()
  set_source_files_properties(${${PROTO_SRCS}} ${${PROCO_HDRS}} PROPERTIES GENERATED TRUE)
  set_source_files_properties(${${GRPC_SRCS}} ${${GRPC_HDRS}} PROPERTIES GENERATED TRUE)
  set(${PROTO_SRCS} ${${PROTO_SRCS}} PARENT_SCOPE)
  set(${PROTO_HDRS} ${${PROTO_HDRS}} PARENT_SCOPE)
  set(${GRPC_SRCS} ${${GRPC_SRCS}} PARENT_SCOPE)
  set(${GRPC_HDRS} ${${GRPC_HDRS}} PARENT_SCOPE)
endfunction()

# Find Protobuf installation
find_package(Protobuf CONFIG REQUIRED)
message(STATUS "Using protobuf ${protobuf_VERSION}")

set(PROTOBUF_LIBPROTOBUF protobuf::libprotobuf)
set(GRPC_REFLECTION gRPC::grpc++_reflection)
find_program(PROTOBUF_PROTOC protoc)
message(STATUS "protoc: ${PROTOBUF_PROTOC}")

# Find gRPC installation
find_package(gRPC CONFIG REQUIRED)
message(STATUS "Using gRPC ${gRPC_VERSION}")

set(GRPC_CPP gRPC::grpc++)
find_program(GRPC_CPP_PLUGIN grpc_cpp_plugin)
message(STATUS "gRPC C++ plugin: ${GRPC_CPP_PLUGIN}")
